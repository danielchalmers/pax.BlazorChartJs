@page "/bubblechart"

<PageTitle>BubbleChart</PageTitle>

<h3>BubbleChartPage</h3>

<div class="btn-group">
    <button type="button" class="btn btn-primary" @onclick="Randomize">Randomize</button>
    <button type="button" class="btn btn-primary" @onclick="AddDataset">Add Dataset</button>
    <button type="button" class="btn btn-primary" @onclick="AddData">Add Data</button>
    <button type="button" class="btn btn-primary" @onclick="RemoveLastDataset">Remove Dataset</button>
    <button type="button" class="btn btn-primary" @onclick="RemoveLastDataFromDatasets">Remove Data</button>
</div>

<div class="w-75">
    <ChartComponent @ref="chartComponent" OnLabelClicked="LabelClicked" ChartJsConfig="chartJsConfig"></ChartComponent>
</div>

<div>
    @if (!String.IsNullOrEmpty(labelClicked))
    {
        <p>
            Label clicked: @labelClicked
        </p>
    }
</div>

@code {
    ChartComponent? chartComponent;
    ChartJsConfig chartJsConfig = null!;
    private string? labelClicked;
    private Random random = new();

    protected override void OnInitialized()
    {
        chartJsConfig = new()
            {
                Type = ChartType.bubble,
                Data = new ChartJsData()
                {
                    Datasets = new List<object>()
                    {
                        new BubbleDataset()
                        {
                            Label = "Bubble Dataset",
                            Data = new List<object>()
                            {
                                new BubbleDataPoint()
                                {
                                    X = -10,
                                    Y = 0,
                                    R = 4
                                },
                                new BubbleDataPoint()
                                {
                                    X = 0,
                                    Y = 10,
                                    R = 6
                                },
                                new BubbleDataPoint()
                                {
                                    X = 10,
                                    Y = 5,
                                    R = 2
                                },
                                new BubbleDataPoint()
                                {
                                    X = 0.5,
                                    Y = 5.5,
                                    R = 1,
                                },
                                new BubbleDataPoint()
                                {
                                    X = 7,
                                    Y = 7,
                                    R = 12
                                },
                            },
                            BackgroundColor = "rgb(255, 99, 132)"
                        }
                    }
                },
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    MaintainAspectRatio = true,
                    Scales = new ChartJsOptionsScales()
                    {
                        X = new LinearAxis()
                        {
                            Type = "linear",
                            Position = "bottom",
                            SuggestedMin = -100,
                            SuggestedMax = 100
                        },
                        Y = new LinearAxis()
                        {
                            SuggestedMin = -100,
                            SuggestedMax = 100
                        }
                    }
                }
            };
        base.OnInitialized();
    }

    private BubbleDataPoint GetRandomPoint(int min = -100, int max = 100)
    {
        return new()
            {
                X = random.Next(min, max),
                Y = random.Next(min, max),
                R = random.Next(1, 15)
            };
    }


    private void ShowChart()
    {
        chartComponent?.DrawChart();
    }

    private void LabelClicked(KeyValuePair<Guid, string> report)
    {
        labelClicked = report.Value;
    }

    private void AddData()
    {
        for (int i = 0; i < chartJsConfig.Data.Datasets.Count; i++)
        {
            var bubbleDataset = chartJsConfig.Data.Datasets[i] as BubbleDataset;
            if (bubbleDataset != null)
            {
                var data = new List<object>(bubbleDataset.Data);
                data.Add(GetRandomPoint());
                chartJsConfig.SetData(bubbleDataset, data);
            }
        }
    }

    private void Randomize()
    {
        if (chartJsConfig.Data.Datasets.Any())
        {
            var dataCount = ((ChartJsDataset)chartJsConfig.Data.Datasets.First()).Data.Count;

            for (int i = 0; i < chartJsConfig.Data.Datasets.Count; i++)
            {
                var bubbleDataset = chartJsConfig.Data.Datasets[i] as BubbleDataset;
                if (bubbleDataset != null)
                {
                    List<object> data = new();
                    for (int j = 0; j < dataCount; j++)
                    {
                        data.Add(GetRandomPoint());
                    }
                    chartJsConfig.SetData(bubbleDataset, data);
                }
            }
        }
    }

    private void AddDataset()
    {
        int dataCount = 5;
        if (chartJsConfig.Data.Datasets.Any())
        {
            dataCount = ((ChartJsDataset)chartJsConfig.Data.Datasets.First()).Data.Count;
        }

        var dataset = ChartUtils.GetRandomDataset(chartJsConfig.Type == null ? ChartType.bar : chartJsConfig.Type.Value, chartJsConfig.Data.Datasets.Count + 1, dataCount);
        chartJsConfig.AddDataset(dataset);
    }

    private void RemoveLastDataset()
    {
        if (chartJsConfig.Data.Datasets.Any())
        {
            chartJsConfig.RemoveDataset(chartJsConfig.Data.Datasets.Last());
        }
    }

    private void RemoveLastDataFromDatasets()
    {
        for (int i = 0; i < chartJsConfig.Data.Datasets.Count; i++)
        {
            var bubbleDataset = chartJsConfig.Data.Datasets[i] as BubbleDataset;
            if (bubbleDataset != null)
            {
                var data = new List<object>(bubbleDataset.Data);
                if (data.Any())
                {
                    data.Remove(data.Last());
                    chartJsConfig.SetData(bubbleDataset, data);
                }
            }
        }
    }
}
