@page "/barchart"

<PageTitle>barchart</PageTitle>

<h3>BarChartPage</h3>

<div class="btn-group">
    <button type="button" class="btn btn-primary" @onclick="ShowChart">ShowChart</button>
    <button type="button" class="btn btn-primary" @onclick="AddData">AddData</button>
    <button type="button" class="btn btn-primary" @onclick="ShowImages">ShowImages</button>
    <button type="button" class="btn btn-primary" @onclick="ShowDataLabels">ShowLabels</button>
</div>
<div class="btn-group">
    <button type="button" class="btn btn-primary" @onclick="Randomize">Randomize</button>
    <button type="button" class="btn btn-primary" @onclick="AddDataset">Add Dataset</button>
    <button type="button" class="btn btn-primary" @onclick="AddData">Add Data</button>
    <button type="button" class="btn btn-primary" @onclick="RemoveLastDataset">Remove Dataset</button>
    <button type="button" class="btn btn-primary" @onclick="RemoveLastDataFromDatasets">Remove Data</button>
</div>

<div class="w-75">
    <ChartComponent @ref="chartComponent" OnLabelClicked="LabelClicked" ChartJsConfig="chartJsConfig"></ChartComponent>
</div>

<div>
    @if (!String.IsNullOrEmpty(labelClicked))
    {
        <p>
            Label clicked: @labelClicked
        </p>
    }
</div>

@code {
    ChartComponent? chartComponent;
    ChartJsConfig chartJsConfig = null!;
    private string? labelClicked;

    protected override void OnInitialized()
    {
        chartJsConfig = new()
            {
                Type = ChartType.bar,
                Data = new ChartJsData()
                {
                    Labels = new List<string>()
                    {
                        "Red", "Blue", "Yellow", "Green", "Purple", "Orange"
                    },
                    Datasets = new List<object>()
                    {
                        new BarDataset()
                        {
                            Label = "# of Votes",
                            Data = new List<object>() { 12, 19, 3, 5, 2, 3 },
                            BackgroundColor = new List<string>()
                            {
                                "rgba(255, 99, 132, 0.2)",
                                "rgba(54, 162, 235, 0.2)",
                                "rgba(255, 206, 86, 0.2)",
                                "rgba(75, 192, 192, 0.2)",
                                "rgba(153, 102, 255, 0.2)",
                                "rgba(255, 159, 64, 0.2)",
                            },
                            BorderColor = new List<string>()
                            {
                                "rgba(255, 99, 132, 1)",
                                "rgba(54, 162, 235, 1)",
                                "rgba(255, 206, 86, 1)",
                                "rgba(75, 192, 192, 1)",
                                "rgba(153, 102, 255, 1)",
                                "rgba(255, 159, 64, 1)",
                            },
                            BorderWidth = 1
                        }
                    }
                },
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    MaintainAspectRatio = true,
                    Plugins = new Plugins()
                    {
                        Labels = new LabelsConfig()
                        {
                            Render = "image"
                        }
                    },
                    Scales = new ChartJsOptionsScales()
                    {
                        Y = new LinearAxis() 
                        {
                            SuggestedMax = 25
                        }
                    }
                }
            };
        base.OnInitialized();
    }


    private void ShowChart()
    {
        chartComponent?.DrawChart();
    }

    private void LabelClicked(KeyValuePair<Guid, string> report)
    {
        labelClicked = report.Value;
    }

    private void ShowImages()
    {
        if (chartJsConfig.Options == null)
        {
            chartJsConfig.Options = new();
        }

        if (chartJsConfig.Options.Plugins == null)
        {
            chartJsConfig.Options.Plugins = new();
        }

        chartJsConfig.Options.Plugins.Labels = new LabelsConfig()
        {
            Render = "image",
            ShowZero = true,
            Images = new List<LabelsConfigImage>()
            {
                new LabelsConfigImage()
                {
                    Src = "./images/abathur-min.png",
                    Width = 45,
                    Height = 45
                },
                new LabelsConfigImage()
                {
                    Src = "./images/alarak-min.png",
                    Width = 45,
                    Height = 45
                },
                new LabelsConfigImage()
                {
                    Src = "./images/artanis-min.png",
                    Width = 45,
                    Height = 45
                },
                new LabelsConfigImage()
                {
                    Src = "./images/alarak-min.png",
                    Width = 45,
                    Height = 45
                },
                new LabelsConfigImage()
                {
                    Src = "./images/alarak-min.png",
                    Width = 45,
                    Height = 45
                }
            }
        };
        // _ = chartComponent?.UpdateChartOptions();
        _ = chartComponent?.DrawChart();
    }

    private void ShowDataLabels()
    {
        if (chartJsConfig.Options == null)
        {
            chartJsConfig.Options = new();
        }

        if (chartJsConfig.Options.Plugins == null)
        {
            chartJsConfig.Options.Plugins = new();
        }

        chartJsConfig.Options.Plugins.Datalabels = new DataLabelsConfig()
        {
            Display = "auto",
            Color = "#0a050c",
            BackgroundColor = "#cdc7ce",
            BorderColor = "#491756",
            BorderRadius = 4,
            BorderWidth = 1,
            Anchor = "end",
            Align = "start",
            Clip = true
        };
        _ = chartComponent?.DrawChart();
    }

    private void AddData()
    {
        ChartUtils.AddRandomData(chartJsConfig);
        chartComponent?.AddLastDatasToDatasets();
    }

    private void Randomize()
    {
        ChartUtils.RandomizeData(chartJsConfig);
        chartComponent?.UpdateChartDatasets();
    }

    private void AddDataset()
    {
        ChartUtils.AddRandomDataset(chartJsConfig);
        chartComponent?.AddLastDataset();
    }

    private void RemoveLastDataset()
    {
        if (chartJsConfig.Data.Datasets.Any())
        {
            chartJsConfig.Data.Datasets.Remove(chartJsConfig.Data.Datasets.Last());
            chartComponent?.RemoveLastDataset();
        }
    }

    private void RemoveLastDataFromDatasets()
    {
        if (chartJsConfig.Data.Datasets.Any())
        {
            if (chartJsConfig.Type == ChartType.bar)
            {
                foreach (BarDataset dataset in chartJsConfig.Data.Datasets.Cast<BarDataset>())
                {
                    if (dataset.Data.Any())
                    {
                        dataset.Data.Remove(dataset.Data.Last());
                    }

                    if (dataset.BackgroundColor != null && dataset.BackgroundColor.GetType() == typeof(List<string>))
                    {
                        if (((List<string>)dataset.BackgroundColor).Any())
                        {
                            ((List<string>)dataset.BackgroundColor).Remove(((List<string>)dataset.BackgroundColor).Last());
                        }
                    }
                    if (dataset.BorderColor != null && dataset.BorderColor.GetType() == typeof(List<string>))
                    {
                        if (((List<string>)dataset.BorderColor).Any())
                        {
                            ((List<string>)dataset.BorderColor).Remove(((List<string>)dataset.BorderColor).Last());
                        }
                    }
                }
            }

            chartComponent?.RemoveLastDataFromDatasets();
        }
    }
}
