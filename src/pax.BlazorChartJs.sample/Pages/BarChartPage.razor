@page "/barchart"

<PageTitle>barchart</PageTitle>

<h3>BarChartPage</h3>

<div class="btn-group">
    <button type="button" class="btn btn-primary" @onclick="ShowChart">ShowChart</button>
    <button type="button" class="btn btn-primary" @onclick="AddData">AddData</button>
</div>

<div class="w-75">
    <ChartComponent @ref="chartComponent" OnLabelClicked="LabelClicked" ChartJsConfig="chartJsConfig"></ChartComponent>
</div>

<div>
    @if (!String.IsNullOrEmpty(labelClicked))
    {
        <p>
            Label clicked: @labelClicked
        </p>
    }
</div>

@code {
    ChartComponent? chartComponent;
    ChartJsConfig chartJsConfig = null!;
    private string? labelClicked;

    protected override void OnInitialized()
    {
        chartJsConfig = new()
            {
                Type = ChartType.bar,
                Data = new ChartJsData()
                {
                    Labels = new List<string>()
                    {
                        "Red", "Blue", "Yellow", "Green", "Purple", "Orange"
                    },
                    Datasets = new List<object>()
                    {
                        new BarDataset()
                        {
                            Label = "# of Votes",
                            Data = new List<double>() { 12, 19, 3, 5, 2, 3 },
                            BackgroundColor = new List<string>()
                            {
                                "rgba(255, 99, 132, 0.2)",
                                "rgba(54, 162, 235, 0.2)",
                                "rgba(255, 206, 86, 0.2)",
                                "rgba(75, 192, 192, 0.2)",
                                "rgba(153, 102, 255, 0.2)",
                                "rgba(255, 159, 64, 0.2)",
                            },
                            BorderColor = new List<string>()
                            {
                                "rgba(255, 99, 132, 1)",
                                "rgba(54, 162, 235, 1)",
                                "rgba(255, 206, 86, 1)",
                                "rgba(75, 192, 192, 1)",
                                "rgba(153, 102, 255, 1)",
                                "rgba(255, 159, 64, 1)",
                            },
                            BorderWidth = 1
                        }
                    }
                },
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    MaintainAspectRatio = true
                }
            };
        base.OnInitialized();
    }


    private void ShowChart()
    {
        chartComponent?.DrawChart();
    }

    private void LabelClicked(KeyValuePair<Guid, string> report)
    {
        labelClicked = report.Value;
    }

    public async Task AddData()
    {
        if (chartComponent != null)
        {
            var dataSet = chartJsConfig.Data.Datasets.First();
            await chartComponent.AddDataToDataset(chartJsConfig, dataSet, "Sommer");
        }
    }
}
